// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.zzl.weierp.domain.consumer;

import com.zzl.weierp.domain.consumer.ConsumerDataOnDemand;
import com.zzl.weierp.domain.consumer.ConsumerDetail;
import com.zzl.weierp.domain.consumer.ConsumerDetailDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ConsumerDetailDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ConsumerDetailDataOnDemand: @Component;
    
    private Random ConsumerDetailDataOnDemand.rnd = new SecureRandom();
    
    private List<ConsumerDetail> ConsumerDetailDataOnDemand.data;
    
    @Autowired
    ConsumerDataOnDemand ConsumerDetailDataOnDemand.consumerDataOnDemand;
    
    public ConsumerDetail ConsumerDetailDataOnDemand.getNewTransientConsumerDetail(int index) {
        ConsumerDetail obj = new ConsumerDetail();
        setAddress(obj, index);
        setEmail(obj, index);
        setPhone(obj, index);
        setQq(obj, index);
        setTrueName(obj, index);
        return obj;
    }
    
    public void ConsumerDetailDataOnDemand.setAddress(ConsumerDetail obj, int index) {
        String address = "address_" + index;
        obj.setAddress(address);
    }
    
    public void ConsumerDetailDataOnDemand.setEmail(ConsumerDetail obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void ConsumerDetailDataOnDemand.setPhone(ConsumerDetail obj, int index) {
        String phone = "phone_" + index;
        obj.setPhone(phone);
    }
    
    public void ConsumerDetailDataOnDemand.setQq(ConsumerDetail obj, int index) {
        String qq = "qq_" + index;
        obj.setQq(qq);
    }
    
    public void ConsumerDetailDataOnDemand.setTrueName(ConsumerDetail obj, int index) {
        String trueName = "trueName_" + index;
        obj.setTrueName(trueName);
    }
    
    public ConsumerDetail ConsumerDetailDataOnDemand.getSpecificConsumerDetail(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ConsumerDetail obj = data.get(index);
        Long id = obj.getId();
        return ConsumerDetail.findConsumerDetail(id);
    }
    
    public ConsumerDetail ConsumerDetailDataOnDemand.getRandomConsumerDetail() {
        init();
        ConsumerDetail obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ConsumerDetail.findConsumerDetail(id);
    }
    
    public boolean ConsumerDetailDataOnDemand.modifyConsumerDetail(ConsumerDetail obj) {
        return false;
    }
    
    public void ConsumerDetailDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ConsumerDetail.findConsumerDetailEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ConsumerDetail' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ConsumerDetail>();
        for (int i = 0; i < 10; i++) {
            ConsumerDetail obj = getNewTransientConsumerDetail(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
