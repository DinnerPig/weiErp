// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.zzl.weierp.domain;

import com.zzl.weierp.domain.Busi;
import com.zzl.weierp.domain.BusiDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect BusiDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BusiDataOnDemand: @Component;
    
    private Random BusiDataOnDemand.rnd = new SecureRandom();
    
    private List<Busi> BusiDataOnDemand.data;
    
    public Busi BusiDataOnDemand.getNewTransientBusi(int index) {
        Busi obj = new Busi();
        setAddress(obj, index);
        setPassword(obj, index);
        setPhone(obj, index);
        setQq(obj, index);
        setRealname(obj, index);
        setSerial(obj, index);
        setUsername(obj, index);
        setWeixin(obj, index);
        return obj;
    }
    
    public void BusiDataOnDemand.setAddress(Busi obj, int index) {
        String address = "address_" + index;
        obj.setAddress(address);
    }
    
    public void BusiDataOnDemand.setPassword(Busi obj, int index) {
        String password = "password_" + index;
        obj.setPassword(password);
    }
    
    public void BusiDataOnDemand.setPhone(Busi obj, int index) {
        String phone = "phone_" + index;
        obj.setPhone(phone);
    }
    
    public void BusiDataOnDemand.setQq(Busi obj, int index) {
        String qq = "qq_" + index;
        obj.setQq(qq);
    }
    
    public void BusiDataOnDemand.setRealname(Busi obj, int index) {
        String realname = "realname_" + index;
        obj.setRealname(realname);
    }
    
    public void BusiDataOnDemand.setSerial(Busi obj, int index) {
        String serial = "serial_" + index;
        obj.setSerial(serial);
    }
    
    public void BusiDataOnDemand.setUsername(Busi obj, int index) {
        String username = "username_" + index;
        obj.setUsername(username);
    }
    
    public void BusiDataOnDemand.setWeixin(Busi obj, int index) {
        String weixin = "weixin_" + index;
        obj.setWeixin(weixin);
    }
    
    public Busi BusiDataOnDemand.getSpecificBusi(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Busi obj = data.get(index);
        Long id = obj.getId();
        return Busi.findBusi(id);
    }
    
    public Busi BusiDataOnDemand.getRandomBusi() {
        init();
        Busi obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Busi.findBusi(id);
    }
    
    public boolean BusiDataOnDemand.modifyBusi(Busi obj) {
        return false;
    }
    
    public void BusiDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Busi.findBusiEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Busi' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Busi>();
        for (int i = 0; i < 10; i++) {
            Busi obj = getNewTransientBusi(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
