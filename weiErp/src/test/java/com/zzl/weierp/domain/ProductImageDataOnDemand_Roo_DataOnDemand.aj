// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.zzl.weierp.domain;

import com.zzl.weierp.domain.ProductDataOnDemand;
import com.zzl.weierp.domain.ProductImage;
import com.zzl.weierp.domain.ProductImageDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProductImageDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductImageDataOnDemand: @Component;
    
    private Random ProductImageDataOnDemand.rnd = new SecureRandom();
    
    private List<ProductImage> ProductImageDataOnDemand.data;
    
    @Autowired
    ProductDataOnDemand ProductImageDataOnDemand.productDataOnDemand;
    
    public ProductImage ProductImageDataOnDemand.getNewTransientProductImage(int index) {
        ProductImage obj = new ProductImage();
        setUrl(obj, index);
        return obj;
    }
    
    public void ProductImageDataOnDemand.setUrl(ProductImage obj, int index) {
        String url = "url_" + index;
        obj.setUrl(url);
    }
    
    public ProductImage ProductImageDataOnDemand.getSpecificProductImage(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProductImage obj = data.get(index);
        Long id = obj.getId();
        return ProductImage.findProductImage(id);
    }
    
    public ProductImage ProductImageDataOnDemand.getRandomProductImage() {
        init();
        ProductImage obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ProductImage.findProductImage(id);
    }
    
    public boolean ProductImageDataOnDemand.modifyProductImage(ProductImage obj) {
        return false;
    }
    
    public void ProductImageDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProductImage.findProductImageEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProductImage' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProductImage>();
        for (int i = 0; i < 10; i++) {
            ProductImage obj = getNewTransientProductImage(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
